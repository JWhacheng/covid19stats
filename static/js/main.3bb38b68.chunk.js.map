{"version":3,"sources":["components/Header.js","components/StatsCard.js","hooks/useStats.js","api/index.js","components/WorldStats.js","components/CountrySelect.js","components/CountryStats.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","StatsCard","number","description","toLocaleString","useStats","url","useState","data","setData","error","setError","loading","setLoading","fetchData","a","fetch","api","json","message","useEffect","COVID_URL","COVID_COUNTRIES_URL","WorldStats","length","confirmed","value","recovered","deaths","CountrySelect","setSelectedCountry","selectedCountry","onChange","e","target","countries","map","element","name","key","iso2","selected","COUNTRY_DEFAULT","CountryStats","countryData","Footer","lastUpdate","format","Date","formatDistanceToNow","href","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.3bb38b68.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header = () => ( \r\n  <div className=\"header\">\r\n    <h1 className=\"header_title\">\r\n      Estad√≠sticas del COVID-19\r\n    </h1>\r\n  </div>\r\n);\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst StatsCard = ({number, description}) => ( \r\n  <div className=\"stats_card card\">\r\n    <h1 className=\"card_number\">\r\n      {number?.toLocaleString()}\r\n    </h1>\r\n    <h3 className=\"card_description\">\r\n      {description}\r\n    </h3>\r\n  </div>\r\n);\r\n\r\nexport default StatsCard;","import { useState, useEffect } from 'react';\r\n\r\nconst useStats = (url) => {\r\n  const [data, setData] = useState();\r\n  const [error, setError] = useState('');\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  async function fetchData() {\r\n    setLoading(true);\r\n    setError('');\r\n    try {\r\n      const api = await fetch(url);\r\n      const data = await api.json();\r\n\r\n      if (data.error) {\r\n        setError(data.error.message);\r\n      } else {\r\n        setData(data);\r\n      }\r\n    } catch (error) {\r\n      setError('Bad request');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [url]);\r\n\r\n  return [data, loading, error, fetchData];\r\n};\r\n\r\nexport default useStats;\r\n\r\n// import { useState, useEffect } from 'react';\r\n\r\n// export default function useStats(url) {\r\n//   const [stats, setStats] = useState();\r\n//   useEffect(() => {\r\n//     const fetchData = async () => {\r\n//       const data = await fetch(url).then((res) => {\r\n//         if (res.status === 200) {\r\n//           return res.json();\r\n//         }\r\n//       });\r\n//       setStats(data);\r\n//     };\r\n//     fetchData();\r\n//   }, [url]);\r\n//   return stats;\r\n// }\r\n","export const COVID_URL = 'https://covid19.mathdro.id/api'\r\nexport const COVID_COUNTRIES_URL = `${COVID_URL}/countries`\r\nexport const DAILY_URL = `${COVID_URL}/daily`","import React from 'react';\r\nimport StatsCard from './StatsCard';\r\nimport useStats from '../hooks/useStats';\r\nimport { COVID_URL } from '../api';\r\n\r\nconst WorldStats = () => {\r\n  const [data, , error] = useStats(COVID_URL);\r\n\r\n\r\n  return (\r\n    <div className=\"stats card\">\r\n      <h1 className=\"stats_title\">Datos mundiales</h1>\r\n      {error.length === 0 && (\r\n        <div className=\"stats_content\">\r\n          <StatsCard number={data?.confirmed?.value} description=\"Confirmados\" />\r\n          <StatsCard number={data?.recovered?.value} description=\"Recuperados\" />\r\n          <StatsCard number={data?.deaths?.value} description=\"Muertos\" />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WorldStats;\r\n","import React from 'react';\r\n\r\nconst CountrySelect = ({ data, setSelectedCountry, selectedCountry }) => {\r\n  return (\r\n    <div className=\"countrySelect\">\r\n      <div className=\"control\">\r\n        <div className=\"select is-info\">\r\n          <select\r\n            className=\"countryselect\"\r\n            onChange={(e) => {\r\n              setSelectedCountry(e.target.value);\r\n            }}\r\n          >\r\n            {data?.countries.map((element) => {\r\n              if (element.name == 'US') {\r\n                element.name = 'United States of America';\r\n              }\r\n              return (\r\n                <option\r\n                  key={element.iso2}\r\n                  value={element.iso2}\r\n                  selected={element.iso2 == selectedCountry}\r\n                >\r\n                  {element.name}\r\n                </option>\r\n              );\r\n            })}\r\n          </select>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountrySelect;\r\n","import React, { useState } from 'react';\r\nimport useStats from '../hooks/useStats';\r\nimport { COVID_COUNTRIES_URL } from '../api';\r\nimport StatsCard from './StatsCard';\r\nimport CountrySelect from './CountrySelect';\r\n\r\nconst COUNTRY_DEFAULT = {\r\n  name: 'Peru',\r\n  iso2: 'PE',\r\n  iso3: 'PER',\r\n};\r\n\r\nconst CountryStats = () => {\r\n  const [data, , error] = useStats(COVID_COUNTRIES_URL);\r\n  const [selectedCountry, setSelectedCountry] = useState(COUNTRY_DEFAULT.iso2);\r\n  const [countryData, countryLoading, cError] = useStats(\r\n    `${COVID_COUNTRIES_URL}/${selectedCountry}`\r\n  );\r\n\r\n  return (\r\n    <div className=\"stats card\">\r\n      <h1 className=\"stats_title\">\r\n        Datos de&nbsp;\r\n        {data?.countries.map((element) => {\r\n          if (element.name === 'US') {\r\n            element.name = 'United States of America';\r\n          }\r\n          if (element.iso2 === selectedCountry) {\r\n            return element.name;\r\n          }\r\n        })}\r\n      </h1>\r\n      <CountrySelect\r\n        selectedCountry={selectedCountry}\r\n        setSelectedCountry={setSelectedCountry}\r\n        data={data}\r\n      />\r\n      {error.length === 0 && (\r\n        <div className=\"stats_content\">\r\n          <StatsCard\r\n            number={countryData?.confirmed?.value}\r\n            description=\"Confirmados\"\r\n          />\r\n          <StatsCard\r\n            number={countryData?.recovered?.value}\r\n            description=\"Recuperados\"\r\n          />\r\n          <StatsCard\r\n            number={countryData?.deaths?.value}\r\n            description=\"Muertos\"\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountryStats;\r\n","import React from 'react';\r\nimport { formatDistanceToNow, format } from 'date-fns';\r\nimport useStats from '../hooks/useStats';\r\nimport { COVID_URL } from '../api';\r\n\r\nconst Footer = () => {\r\n  const [data, , error] = useStats(COVID_URL);\r\n\r\n  return (\r\n    <div className=\"footer\">\r\n      <div className=\"footer_container\">\r\n        <div className=\"footer_content\">\r\n          <span>√öltima actualizaci√≥n:&nbsp;</span>\r\n          {data?.lastUpdate && (\r\n            <>\r\n              <span>\r\n                {format(new Date(data?.lastUpdate), \"dd/MM/yyyy - hh:mm a\")}&nbsp;\r\n              </span>\r\n              <span>&nbsp;({formatDistanceToNow(new Date(data?.lastUpdate))})</span>\r\n            </>\r\n          )}\r\n        </div>\r\n        <div className=\"footer_content\">\r\n          <div>\r\n            Proporcionado por&nbsp;\r\n            <a\r\n              className=\"footer_link\"\r\n              href=\"https://github.com/mathdroid/covid-19-api\"\r\n              target=\"_blank\"\r\n            >\r\n              COVID-19 API\r\n            </a>\r\n          </div>\r\n          <div className=\"footer_divider\">|</div>\r\n          <div>\r\n            Hecho por&nbsp;\r\n            <a\r\n              className=\"footer_link\"\r\n              href=\"https://www.linkedin.com/in/joseph-whacheng/\"\r\n              target=\"_blank\"\r\n            >\r\n              Joseph Whacheng\r\n            </a>\r\n          </div>\r\n          <div className=\"footer_divider\">|</div>\r\n          <div>\r\n            Repositorio&nbsp;\r\n            <a\r\n              className=\"footer_link\"\r\n              href=\"#\"\r\n              target=\"_blank\"\r\n            >\r\n              GitHub\r\n            </a>\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\nimport Header from './components/Header';\r\nimport WorldStats from './components/WorldStats';\r\nimport CountryStats from './components/CountryStats';\r\nimport Footer from './components/Footer';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"main-container\">\r\n      <div className=\"content\">\r\n        <Header/>\r\n        <div className=\"container\">\r\n          <WorldStats/>\r\n          <CountryStats />\r\n        </div>\r\n        <Footer/>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}